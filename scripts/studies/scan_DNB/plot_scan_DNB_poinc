#plot_scan_DNB_poinc.py
 
"""
Samuel Ward
06/11/21
----
script for plotting scan_DNB
---
 
notes:
remember to comment out any continue blocks in the launch script
---
"""

###################################################################################################
#Preamble
 
import sys #have global imports --> makes less modular (no "from input_classes import x") but best practice to import whole input_classes module anyway

try:
    import numpy as np
    import pathlib
    import copy
    import matplotlib.pyplot as plt
    import os
except:
    raise ImportError("ERROR: initial modules could not be imported!\nreturning\n")
    sys.exit(1)

if __name__=='__main__':

    try:
        import context
    except:
        raise ImportError("ERROR: context.py could not be imported!\nreturning\n")
        sys.exit(1)
try:
    from classes.input_classes.equilibrium import Equilibrium
except:
    raise ImportError("ERROR: LOCUST_IO/src/classes/input_classes/equilibrium.py could not be imported!\nreturning\n") 
    sys.exit(1)
try:
    from classes.input_classes.beam_deposition import Beam_Deposition
except:
    raise ImportError("ERROR: LOCUST_IO/src/classes/input_classes/perturbation.py could not be imported!\nreturning\n") 
    sys.exit(1)
try:
    import processing.utils
except:
    raise ImportError("ERROR: LOCUST_IO/src/processing/utils.py could not be imported!\nreturning\n") 
    sys.exit(1)

try:
    import support
except:
    raise ImportError("ERROR: LOCUST_IO/src/support.py could not be imported!\nreturning\n") 
    sys.exit(1)
try:
    import constants
except:
    raise ImportError("ERROR: LOCUST_IO/src/constants.py could not be imported!\nreturning\n") 
    sys.exit(1)
try:
    import settings
except:
    raise ImportError("ERROR: LOCUST_IO/src/settings.py could not be imported!\nreturning\n") 
    sys.exit(1)

try:
    cwd=pathlib.Path(os.path.dirname(os.path.realpath(__file__)))
    sys.path.append(str(cwd.parents[1]))
    import templates.plot_mod
except:
    raise ImportError("ERROR: templates/template_mod.py could not be imported!\nreturning\n") 
    sys.exit(1)

################################################################## 
#Main 

cmap_r=settings.colour_custom([194,24,91,1])
cmap_g=settings.colour_custom([76,175,80,1])
cmap_b=settings.colour_custom([33,150,243,1])

colours=plt.rcParams['axes.prop_cycle'].by_key()['color']

import scan_DNB_launch as batch_data

output_poincs=np.array(templates.plot_mod.apply_func_parallel(templates.plot_mod.read_locust_io_obj,'poinc3',batch_data,processes=8,chunksize=1)).reshape(
    len(batch_data.parameters__databases),
    len(batch_data.parameters__toroidal_mode_numbers),
    len(batch_data.parameters__phases_uppers_case7[0]),
    len(batch_data.parameters__currents_upper),
    )
input_eqs=np.array(templates.plot_mod.apply_func_parallel(templates.plot_mod.read_locust_io_obj,'eq',batch_data,processes=16,chunksize=1,GEQDSKFIX1=True,GEQDSKFIX2=True)).reshape(
    len(batch_data.parameters__databases),
    len(batch_data.parameters__toroidal_mode_numbers),
    len(batch_data.parameters__phases_uppers_case7[0]),
    len(batch_data.parameters__currents_upper),
    )

fig_2D_n3=plt.figure(figsize=(10, 15),constrained_layout=False)
fig_2D_n4=plt.figure(figsize=(10, 15),constrained_layout=False)
dimensions=(len(batch_data.parameters__databases),len(batch_data.parameters__currents_uppers[0])-1)
ax_total_2D_n3=fig_2D_n3.add_subplot(1,1,1,frameon=False)
ax_total_2D_n3.tick_params(labelcolor='w', top=False, bottom=False, left=False, right=False)
ax_total_2D_n3.spines['top'].set_color('none')
ax_total_2D_n3.spines['bottom'].set_color('none')
ax_total_2D_n3.spines['left'].set_color('none')
ax_total_2D_n3.spines['right'].set_color('none')
ax_total_2D_n4=fig_2D_n4.add_subplot(1,1,1,frameon=False)
ax_total_2D_n4.tick_params(labelcolor='w', top=False, bottom=False, left=False, right=False)
ax_total_2D_n4.spines['top'].set_color('none')
ax_total_2D_n4.spines['bottom'].set_color('none')
ax_total_2D_n4.spines['left'].set_color('none')
ax_total_2D_n4.spines['right'].set_color('none')

ax_group_2D_n3=[]
ax_group_2D_n4=[]
_=1
for dim in dimensions: _*=dim
for _ in range(_):
    ax_group_2D_n3.append(fig_2D_n3.add_subplot(*dimensions,_+1))
    ax_group_2D_n4.append(fig_2D_n4.add_subplot(*dimensions,_+1))

ax_group_2D_n3=np.array(ax_group_2D_n3).T.reshape(dimensions)
ax_group_2D_n4=np.array(ax_group_2D_n4).T.reshape(dimensions)

phi=80
title_n3=r'Poincare section ($\Phi_{\mathrm{m}}=\ang{80})'
title_n4=r'Poincare section ($\Phi_{\mathrm{m}}=\ang{80})'
for database_counter,(
        parameters__database,parameters__sheet_name_kinetic_prof,
        parameters__phases_uppers,parameters__phases_middles,parameters__phases_lowers,
        parameters__currents_upper,parameters__currents_middle,parameters__currents_lower 
        ) in enumerate(zip(
        batch_data.parameters__databases,batch_data.parameters__sheet_names_kinetic_prof,
        batch_data.parameters__phases_uppers_cases_all,batch_data.parameters__phases_middles_cases_all,batch_data.parameters__phases_lowers_cases_all,
        batch_data.parameters__currents_uppers,batch_data.parameters__currents_middles,batch_data.parameters__currents_lowers
        )): 
    for parameters__kinetic_prof_tF_tE,parameters__kinetic_prof_Pr in zip(batch_data.parameters__kinetic_profs_tF_tE,batch_data.parameters__kinetic_profs_Pr):
        for mode_counter,(ax_group_title,ax_group,fig_2D,parameters__toroidal_mode_number,parameters__phases_upper,parameters__phases_middle,parameters__phases_lower) in enumerate(zip([title_n3,title_n4],[ax_group_2D_n3,ax_group_2D_n4],[fig_2D_n3,fig_2D_n4],batch_data.parameters__toroidal_mode_numbers,parameters__phases_uppers,parameters__phases_middles,parameters__phases_lowers)):
            for current_counter,(parameters__current_upper,parameters__current_middle,parameters__current_lower) in enumerate(zip(
                parameters__currents_upper,
                parameters__currents_middle,
                parameters__currents_lower)):                    
                if parameters__current_upper==0: continue
                if output_poincs[database_counter,mode_counter,0,current_counter-1] and input_eqs[database_counter,0,0,0]:
                    #ax_group[database_counter,current_counter-1].set_xlim([,])
                    ax_group[database_counter,current_counter-1].set_ylim([1.,4.])
                    templates.plot_mod.plot_poincare_q_theta(output_poincs[database_counter,mode_counter,0,current_counter-1],input_eqs[database_counter,0,0,0],phi=phi*np.pi/180.,ax=ax_group[mode_counter,current_counter-1],fig=fig_2D)

            ax_group[database_counter,current_counter-1].text(x=0.95,y=0.95,s=f'{parameters__database.split("_")[-1]}'+', $I_{\mathrm{c}}$'+f'={int(parameters__current_upper/1000)}kAt',fontsize=10,
            ha='right',
            va='bottom',
            rotation='horizontal',
            transform=ax_group[database_counter,current_counter-1].transAxes,
            color=settings.colour_custom(rgba=[100,100,100,1])(0.),
            )
            ax_group[database_counter,current_counter-1].set_xlabel('')
            ax_group[database_counter,current_counter-1].set_ylabel('')
            ax_group[database_counter,current_counter-1].tick_params(
                axis='both',          
                which='both',      
                labelbottom=False,
                labelleft=False,    
                )

            for axis in ax_group[-1,:]:
                axis.tick_params(
                    axis='both',          
                    which='both',      
                    labelbottom=True,
                    labelsize=10,
                    )

            for axis in ax_group[:,0]:
                axis.tick_params(
                    axis='both',          
                    which='both',      
                    labelleft=True,
                    labelsize=10,
                    )

ax_total_2D_n3.set_xlabel('Energy [keV]',fontsize=15)
ax_total_2D_n3.set_ylabel(r'Pitch ($v_{\parallel}/v$)',fontsize=15)
ax_total_2D_n4.set_xlabel('Energy [keV]',fontsize=15)
ax_total_2D_n4.set_ylabel(r'Pitch ($v_{\parallel}/v$)',fontsize=15)

#plt.savefig(
#    fname=f'/home/ITER/wards2/pics/paper_3_DNB_loss_bounds_E.pdf',
#    dpi=800,
#)



if __name__ == '__main__':
    plt.show()





